# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  email: String!
  firstName: String!
  idAdminUser: ID!
  isActive: Boolean
  lastName: String!
  mediaUrl: String
  password: String!
}

type AdminEmailUpdateResponse {
  access_token: String!
  user: Admin!
}

type AdminLoginResponse {
  access_token: String!
  user: Admin!
}

type Category {
  categoryName: String!
  events: Event
  idCategory: ID!
  subCategories: [SubCategory!]
}

input CreateAdminUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input CreateBasicEventInput {
  endDate: DateTime!
  eventTitle: String!
  location: CreateLocationInput!
  refIdCategory: Float
  refIdSubCategory: Float
  startDate: DateTime!
  tags: [String!]
  type: String
}

input CreateCategoryInput {
  categoryName: String!
}

input CreateCustomerInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input CreateEventTicketInput {
  availableQuantity: Float!
  endDate: DateTime!
  isVisible: Boolean
  maxQuantity: Float!
  minQuantity: Float!
  refIdEvent: Float!
  startDate: DateTime!
  ticketDescription: String
  ticketName: String!
  ticketPrice: Float!
}

input CreateLocationInput {
  city: String!
  country: String!
  lat: String!
  locationType: LocationTypes!
  long: String!
  placeId: String
  postalCode: String!
  state: String
  streetAddress: String!
  venueName: String!
}

input CreateOrganizerInput {
  description: String
  name: String!
  organizationBio: String
  websiteLink: String
}

input CreateSubCategoryInput {
  idCategory: ID!
  subCategoryName: String!
}

type Customer {
  JobTitle: String
  cellPhone: String
  city: String
  companyName: String
  country: String
  email: String!
  firstAddress: String
  firstName: String!
  homePhone: String
  id: ID!
  isActive: Boolean
  lastName: String!
  password: String!
  secondAddress: String
  state: String
  website: String
  zipCode: String
}

type CustomerEmailUpdateResponse {
  access_token: String!
  user: Customer!
}

type CustomerLoginResponse {
  access_token: String!
  user: Customer!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  category: Category
  endDate: DateTime!
  eventDetails: EventDetailsEntity
  eventStatus: EventStatus!
  eventTickets: EventTicketsEntity
  eventTitle: String!
  idEvent: ID!
  location: LocationsEntity!
  startDate: DateTime!
  subCategory: SubCategory
  tags: [String!]
  type: String
}

type EventDetailsEntity {
  event: Event!
  eventDescription: String!
  eventSummary: String!
  idEventDetails: ID!
}

input EventDetailsInput {
  eventDescription: String
  eventSummary: String
  refIdEvent: Float!
}

"""The status of event"""
enum EventStatus {
  DRAFT
  PUBLISHED
  SOLD
}

type EventTicketsEntity {
  availableQuantity: Float!
  endDate: DateTime!
  event: Event
  idEventTicket: ID!
  isVisible: Boolean
  maxQuantity: Float!
  minQuantity: Float!
  startDate: DateTime!
  ticketDescription: String
  ticketName: String!
  ticketPrice: Float!
}

"""The type of location for an event (ONLINE_EVENT or VENUE_EVENT)"""
enum LocationTypes {
  ONLINE_EVENT
  VENUE_EVENT
}

type LocationsEntity {
  city: String!
  country: String!
  idLocation: ID!
  lat: String!
  locationType: LocationTypes!
  long: String!
  placeId: String
  postalCode: String!
  state: String
  streetAddress: String!
  venueName: String!
}

input LoginAdminInput {
  email: String!
  password: String!
}

input LoginCustomerInput {
  email: String!
  password: String!
}

type Mutation {
  """Create new admin user"""
  createAdminUser(input: CreateAdminUserInput!): SuccessResponse!

  """This will crete new Events"""
  createBasicEvent(input: CreateBasicEventInput!): SuccessResponse!

  """This will crete new Categories"""
  createCategory(input: CreateCategoryInput!): SuccessResponse!

  """This will signup new `Customers"""
  createCustomer(input: CreateCustomerInput!): CustomerLoginResponse!

  """This will create new Ticket for the Event"""
  createEventTickets(input: CreateEventTicketInput!): SuccessResponse!

  """This will crete new Events"""
  createOrUpdateEventDetails(input: EventDetailsInput!): SuccessResponse!

  """This will signup new `Organizers"""
  createOrganizer(input: CreateOrganizerInput!): SuccessResponse!

  """This will crete new SubCategories"""
  createSubCategory(input: CreateSubCategoryInput!): SuccessResponse!

  """Admin Login"""
  loginAsAdmin(input: LoginAdminInput!): AdminLoginResponse!

  """Customer Login"""
  loginAsCustomer(input: LoginCustomerInput!): CustomerLoginResponse!

  """Update admin data"""
  updateAdminData(input: UpdateAdminUserInput!): String!

  """Update admin email"""
  updateAdminEmail(input: String!): AdminEmailUpdateResponse!

  """This will update Admin Password"""
  updateAdminPassword(password: String!): SuccessResponse!

  """This will update ticket for the Event"""
  updateBasicEvent(input: UpdateBasicEventInput!): SuccessResponse!

  """This will update Category"""
  updateCategory(input: UpdateCategoryInput!): Category!

  """This will update Customer"""
  updateCustomer(input: UpdateCustomerInput!): Customer!

  """Update customer email"""
  updateCustomerEmail(input: String!): CustomerEmailUpdateResponse!

  """This will update Customer Password"""
  updateCustomerPassword(password: String!): SuccessResponse!

  """This will update ticket for the Event"""
  updateEventTicket(input: UpdateEventTicketInput!): SuccessResponse!

  """This will signup new `Organizers"""
  updateOrganizer(input: UpdateOrganizerInput!): Organizer!

  """This will update SubCategory"""
  updateSubCategories(input: UpdateSubCategoryInput!): SubCategory!
}

type Organizer {
  description: String
  idOrganizerUser: ID!
  isActive: Boolean
  name: String!
  organizationBio: String
  websiteLink: String
}

type Query {
  """This will get all categories"""
  getAllCategories: [Category!]!

  """This will get all categories"""
  getAllSubCategories: [SubCategory!]!

  """Get the Customer"""
  getCustomerData: Customer!
  getCustomerUploadUrl: S3SignedUrlResponse!

  """The List of Customers"""
  getCustomers: [Customer!]!

  """check if email already exist"""
  validEmailAdmin(input: String!): SuccessResponse!

  """check if email already exist"""
  validEmailCustomer(input: String!): SuccessResponse!
}

type S3SignedUrlResponse {
  fileName: String!
  signedUrl: String!
}

type SubCategory {
  category: Category!
  events: [Event!]
  idSubCategory: ID!
  subCategoryName: String!
}

type SuccessResponse {
  message: String
  success: Boolean
}

input UpdateAdminUserInput {
  email: String
  firstName: String
  lastName: String
  mediaUrl: String
}

input UpdateBasicEventInput {
  endDate: DateTime!
  eventTitle: String!
  idEvent: ID!
  location: CreateLocationInput!
  refIdCategory: Float
  refIdSubCategory: Float
  startDate: DateTime!
  tags: [String!]
  type: String
}

input UpdateCategoryInput {
  categoryName: String!
  idCategory: ID!
}

input UpdateCustomerInput {
  JobTitle: String
  cellPhone: String
  city: String
  companyName: String
  country: String
  firstAddress: String
  firstName: String
  homePhone: String
  isActive: Boolean
  lastName: String
  secondAddress: String
  state: String
  website: String
  zipCode: String
}

input UpdateEventTicketInput {
  availableQuantity: Float!
  endDate: DateTime!
  idEventTicket: ID!
  isVisible: Boolean
  maxQuantity: Float!
  minQuantity: Float!
  refIdEvent: Float!
  startDate: DateTime!
  ticketDescription: String
  ticketName: String!
  ticketPrice: Float!
}

input UpdateOrganizerInput {
  description: String
  idOrganizerUser: ID!
  name: String!
  organizationBio: String
  websiteLink: String
}

input UpdateSubCategoryInput {
  idCategory: ID!
  idSubCategory: ID!
  subCategoryName: String!
}